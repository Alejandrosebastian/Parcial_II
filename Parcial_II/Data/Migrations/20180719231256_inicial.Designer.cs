// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Parcial_II.Data;
using System;

namespace Parcial_II.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180719231256_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Parcial_II.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Parcial_II.Models.Categoria_Laboral", b =>
                {
                    b.Property<int>("Categoria_LaboralId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("Categoria_LaboralId");

                    b.ToTable("Categoria_Laboral");
                });

            modelBuilder.Entity("Parcial_II.Models.Ciudad", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("CiudadId");

                    b.ToTable("Ciudad");
                });

            modelBuilder.Entity("Parcial_II.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cedula")
                        .HasMaxLength(10);

                    b.Property<string>("Correo")
                        .IsRequired();

                    b.Property<DateTime>("Fecha_registro");

                    b.Property<int>("Importe_maximo");

                    b.Property<string>("Primerapellido")
                        .IsRequired();

                    b.Property<string>("Primernombre")
                        .IsRequired();

                    b.Property<string>("Segundoapellido")
                        .IsRequired();

                    b.Property<string>("Segundonombre")
                        .IsRequired();

                    b.Property<int>("Telefono");

                    b.Property<string>("Tipo_prefe_inmueble")
                        .IsRequired();

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Parcial_II.Models.Contrato", b =>
                {
                    b.Property<int>("ContratoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<int>("SucursalId");

                    b.Property<int?>("TipopagoId");

                    b.Property<int>("TipopagosId");

                    b.Property<int>("deposito");

                    b.Property<DateTime>("fecha_ini");

                    b.Property<DateTime>("fecha_vence");

                    b.HasKey("ContratoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipopagoId");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("Parcial_II.Models.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoriaLaboralId");

                    b.Property<int?>("Categoria_LaboralId");

                    b.Property<string>("Correo")
                        .IsRequired();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<int>("Edad");

                    b.Property<DateTime>("Fecha_nacimiento");

                    b.Property<string>("PrimerApellido")
                        .IsRequired();

                    b.Property<string>("PrimerNombre")
                        .IsRequired();

                    b.Property<string>("Salario")
                        .IsRequired();

                    b.Property<string>("SegundoApellido")
                        .IsRequired();

                    b.Property<string>("SegundoNombre")
                        .IsRequired();

                    b.Property<int>("UsuarioId");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("Categoria_LaboralId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Parcial_II.Models.Inmuebles", b =>
                {
                    b.Property<int>("InmueblesId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Costo");

                    b.Property<string>("N_habitaciones")
                        .IsRequired();

                    b.Property<int>("ParroquiaId");

                    b.Property<int>("PropietarioId");

                    b.Property<int>("Tipos_inmuid");

                    b.Property<bool>("activo");

                    b.Property<string>("direccion")
                        .IsRequired();

                    b.HasKey("InmueblesId");

                    b.HasIndex("ParroquiaId");

                    b.HasIndex("PropietarioId");

                    b.HasIndex("Tipos_inmuid");

                    b.ToTable("Inmuebles");
                });

            modelBuilder.Entity("Parcial_II.Models.Parroquia", b =>
                {
                    b.Property<int>("ParroquiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CiudadId");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("ParroquiaId");

                    b.HasIndex("CiudadId");

                    b.ToTable("Parroquia");
                });

            modelBuilder.Entity("Parcial_II.Models.Propietario", b =>
                {
                    b.Property<int>("PropietarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<string>("Apellido2")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<string>("Nombre1")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<string>("Nombre2")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.Property<int>("Telefono");

                    b.HasKey("PropietarioId");

                    b.ToTable("Propietario");
                });

            modelBuilder.Entity("Parcial_II.Models.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("RolId");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Parcial_II.Models.Sucur_emple", b =>
                {
                    b.Property<int>("Sucur_empleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmpleadoId");

                    b.Property<int?>("SucursalId");

                    b.Property<int>("SucursualesId");

                    b.HasKey("Sucur_empleId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Sucur_emple");
                });

            modelBuilder.Entity("Parcial_II.Models.Sucursal", b =>
                {
                    b.Property<int>("SucursalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<int>("ParroquiaId");

                    b.Property<int>("Telefono");

                    b.HasKey("SucursalId");

                    b.HasIndex("ParroquiaId");

                    b.ToTable("Sucursal");
                });

            modelBuilder.Entity("Parcial_II.Models.Tipopago", b =>
                {
                    b.Property<int>("TipopagoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre_tipopago")
                        .IsRequired();

                    b.HasKey("TipopagoId");

                    b.ToTable("Tipopago");
                });

            modelBuilder.Entity("Parcial_II.Models.Tipos_inmu", b =>
                {
                    b.Property<int>("Tipos_inmuId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(220);

                    b.HasKey("Tipos_inmuId");

                    b.ToTable("Tipos_inmu");
                });

            modelBuilder.Entity("Parcial_II.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave")
                        .IsRequired();

                    b.Property<int>("RolId");

                    b.Property<string>("Usuarios")
                        .IsRequired();

                    b.HasKey("UsuarioId");

                    b.HasIndex("RolId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Parcial_II.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Parcial_II.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parcial_II.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Parcial_II.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parcial_II.Models.Contrato", b =>
                {
                    b.HasOne("Parcial_II.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parcial_II.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parcial_II.Models.Tipopago", "Tipopago")
                        .WithMany()
                        .HasForeignKey("TipopagoId");
                });

            modelBuilder.Entity("Parcial_II.Models.Empleado", b =>
                {
                    b.HasOne("Parcial_II.Models.Categoria_Laboral", "Categoria_Laboral")
                        .WithMany()
                        .HasForeignKey("Categoria_LaboralId");

                    b.HasOne("Parcial_II.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parcial_II.Models.Inmuebles", b =>
                {
                    b.HasOne("Parcial_II.Models.Parroquia", "Parroquia")
                        .WithMany()
                        .HasForeignKey("ParroquiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parcial_II.Models.Propietario", "Propietario")
                        .WithMany()
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parcial_II.Models.Tipos_inmu", "Tipos_inmu")
                        .WithMany()
                        .HasForeignKey("Tipos_inmuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parcial_II.Models.Parroquia", b =>
                {
                    b.HasOne("Parcial_II.Models.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parcial_II.Models.Sucur_emple", b =>
                {
                    b.HasOne("Parcial_II.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parcial_II.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId");
                });

            modelBuilder.Entity("Parcial_II.Models.Sucursal", b =>
                {
                    b.HasOne("Parcial_II.Models.Parroquia", "Parroquia")
                        .WithMany()
                        .HasForeignKey("ParroquiaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parcial_II.Models.Usuario", b =>
                {
                    b.HasOne("Parcial_II.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
